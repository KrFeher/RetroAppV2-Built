{"version":3,"sources":["OpinionStep.js","VoteStep.js","SummaryStep.js","Retro.js","Admin.js","LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["OpinionStep","props","exampleUuids","uuid","useState","id","description","isPositive","opinions","setOpinions","currentIsPositive","setCurrentIsPositive","newOpinion","setNewOpinion","onCurrentIconClick","Fragment","Container","Grid","Column","Row","style","paddingBottom","Input","label","onChange","event","target","value","Button","circular","size","marginLeft","onClick","icon","color","floated","Divider","List","map","opinion","Item","verticalAlign","padding","key","Content","Description","Icon","name","newArray","filter","deleteOpinion","textAlign","paddingTop","labelPosition","finishedAddingAction","VoteStep","opinionsWithVotes","setOpinionsWithVotes","useEffect","newStates","forEach","upVoted","Object","entries","SummaryStep","votes","sortedGoodOpinions","setSortedGoodOpinions","sortedBadOpinions","setSortedBadOpinions","onlyGood","onlyBad","sortedGood","sort","opinionA","opinionB","sortedBad","Label","Retro","opinionStepVisibility","setOpinionStepVisibility","voteStepVisibility","setVoteStepVisibility","summaryStepVisibility","setSummaryStepVisibility","activeBreadCrumb","setActiveBreadCrumb","onNextStepClick","stepNumber","width","border","margin","Breadcrumb","Section","active","Admin","placeholder","Header","LoginPage","history","useHistory","Modal","defaultOpen","closeOnDimmerClick","push","Message","error","content","hidden","selection","App","authenticated","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iVAgLeA,EApKK,SAACC,GAEnB,IAAMC,EAAe,CAACC,cAAQA,eAFD,EAIGC,mBAAS,CACvC,CACEC,GAAIH,EAAa,GACjBI,YAAa,4BACbC,YAAY,GAEd,CACEF,GAAIH,EAAa,GACjBI,YAAa,4BACbC,YAAY,KAba,mBAItBC,EAJsB,KAIZC,EAJY,OAgBqBL,mBAAS,WAhB9B,mBAgBtBM,EAhBsB,KAgBHC,EAhBG,OAiBOP,mBAAS,IAjBhB,mBAiBtBQ,EAjBsB,KAiBVC,EAjBU,KAoBvBC,EAAqB,WACzB,OAAQJ,GACN,IAAK,UACHC,GAAqB,GACrB,MACF,KAAK,EACHA,GAAqB,GACrB,MACF,KAAK,EACHA,GAAqB,KAwC3B,OACE,kBAAC,IAAMI,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KACE,kBAACD,EAAA,EAAKE,IAAN,CAAUC,MAAO,CAAEC,cAAe,SAChC,kBAACC,EAAA,EAAD,CACEC,MAAM,sBACNC,SAjBe,SAACC,GAC5BZ,EAAcY,EAAMC,OAAOC,WAmBnB,kBAACV,EAAA,EAAKE,IAAN,CAAUC,MAAO,CAAEC,cAAe,SACjC,qBACwB,YAAtBX,EACC,kBAACkB,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,OACLV,MAAO,CAAEW,WAAY,QACrBC,QAASlB,GAJX,UAQEJ,EACF,kBAACkB,EAAA,EAAD,CACEC,UAAQ,EACRI,KAAK,OACLH,KAAK,OACLV,MAAO,CAAEW,WAAY,QACrBG,MAAM,QACNF,QAASlB,IAGX,kBAACc,EAAA,EAAD,CACEC,UAAQ,EACRI,KAAK,QACLH,KAAK,OACLV,MAAO,CAAEW,WAAY,QACrBG,MAAM,MACNF,QAASlB,IAGb,kBAACc,EAAA,EAAD,CACEO,QAAQ,QACRL,KAAK,OACLI,MAAM,QACNF,QA9EK,WACS,YAAtBtB,GAAmCE,GACrCH,EAAY,GAAD,mBACND,GADM,CAET,CAAEH,GAAIF,cAAQG,YAAaM,EAAYL,WAAYG,QAsE7C,gBASF,kBAACO,EAAA,EAAKE,IAAN,QAGJ,kBAACiB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG7B,EAAS8B,KAAI,SAACC,GACb,OACE,kBAACF,EAAA,EAAKG,KAAN,CACEC,cAAc,SACdrB,MAAO,CAAEsB,QAAS,OAClBC,IAAKJ,EAAQlC,IAEb,kBAACgC,EAAA,EAAKO,QAAN,CAAcT,QAAQ,QACpB,kBAACE,EAAA,EAAKQ,YAAN,KACGN,EAAQhC,WACP,kBAACuC,EAAA,EAAD,CAAMC,KAAK,OAAOb,MAAM,UAExB,kBAACY,EAAA,EAAD,CAAMC,KAAK,QAAQb,MAAM,QAE1BK,EAAQjC,cAGb,kBAAC+B,EAAA,EAAKO,QAAN,CAAcT,QAAQ,SACpB,kBAACP,EAAA,EAAD,CACEE,KAAK,OACLG,KAAK,QACLJ,UAAQ,EACRG,QAAS,kBArGL,SAAC3B,GACrB,IAAM2C,EAAWxC,EAASyC,QAAO,SAACV,GAChC,OAAOA,EAAQlC,KAAOA,KAExBI,EAAY,YAAIuC,IAiGeE,CAAcX,EAAQlC,cAQnD,kBAACW,EAAA,EAAD,CAAWmC,UAAU,QAAQ/B,MAAO,CAAEgC,WAAY,SAChD,kBAACxB,EAAA,EAAD,CAAQK,MAAI,EAACoB,cAAc,QAAQrB,QA3FjB,WACtB/B,EAAMqD,qBAAqB,KA0FvB,kBAEE,kBAACR,EAAA,EAAD,CAAMC,KAAK,oB,gBC7BNQ,EAhIS,SAACtD,GAAU,MAEDG,mBAAS,CACvC,CACEC,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,GAEd,CACEF,GAAIF,cACJG,YAAa,6BACbC,YAAY,KAzCiB,mBAE1BC,EAF0B,aA6CiBJ,mBAAS,KA7C1B,mBA6C1BoD,EA7C0B,KA6CPC,EA7CO,KA+CjCC,qBAAU,WAIR,IAAIC,EAAY,GAChBnD,EAASoD,SAAQ,SAACrB,GAChBoB,EAAS,eACJA,EADI,eAENpB,EAAQlC,GAAK,CACZC,YAAaiC,EAAQjC,YACrBC,WAAYgC,EAAQhC,WACpBsD,SAAS,QAKfJ,EAAqBE,KACpB,IAiBH,OACE,kBAAC,IAAM5C,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,KACGyB,OAAOC,QAAQP,GAAmBlB,KAAI,SAACC,GACtC,OACE,kBAACF,EAAA,EAAKG,KAAN,CACEC,cAAc,SACdrB,MAAO,CAAEsB,QAAS,OAClBC,IAAKJ,EAAQ,IAEb,kBAACF,EAAA,EAAKO,QAAN,CAAcT,QAAQ,QACpB,kBAACE,EAAA,EAAKQ,YAAN,KACGN,EAAQ,GAAGhC,WACV,kBAACuC,EAAA,EAAD,CAAMC,KAAK,OAAOb,MAAM,UAExB,kBAACY,EAAA,EAAD,CAAMC,KAAK,QAAQb,MAAM,QAE1BK,EAAQ,GAAGjC,cAGhB,kBAAC+B,EAAA,EAAKO,QAAN,CAAcT,QAAQ,SACpB,kBAACP,EAAA,EAAD,CACEE,KAAK,OACLG,KAAK,WACLC,MACEsB,EAAkBjB,EAAQ,IAAIsB,QAAU,QAAU,OAEpDhC,UAAQ,EACRG,QAAS,kBAvCJ3B,EAuCwBkC,EAAQ,QAtCrDkB,EAAqB,eAChBD,EADe,eAEjBnD,EAFiB,eAGbmD,EAAkBnD,GAHL,CAIhBwD,SAAUL,EAAkBnD,GAAIwD,aALhB,IAACxD,YA+CnB,kBAACW,EAAA,EAAD,CAAWmC,UAAU,QAAQ/B,MAAO,CAAEgC,WAAY,SAChD,kBAACxB,EAAA,EAAD,CAAQK,MAAI,EAACoB,cAAc,QAAQrB,QArDjB,WAEtB/B,EAAMqD,qBAAqB,KAmDvB,yBAEE,kBAACR,EAAA,EAAD,CAAMC,KAAK,oB,QCINiB,EA3HK,SAAC/D,GAAW,IAAD,EACGG,mBAAS,CACvC,CACEC,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,GAET,CACE5D,GAAIF,cACJG,YAAa,6BACbC,YAAY,EACZ0D,MAAO,KAhDkB,mBACtBzD,EADsB,aAoDuBJ,mBAAS,KApDhC,mBAoDtB8D,EApDsB,KAoDFC,EApDE,OAqDqB/D,mBAAS,IArD9B,mBAqDtBgE,EArDsB,KAqDHC,EArDG,KAgE7B,OATAX,qBAAU,WACR,IAAMY,EAAW9D,EAASyC,QAAO,SAAAV,GAAO,OAAIA,EAAQhC,cAC9CgE,EAAU/D,EAASyC,QAAO,SAAAV,GAAO,OAAKA,EAAQhC,cAC9CiE,EAAaF,EAASG,MAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASV,MAAQS,EAAST,SAC7EW,EAAYL,EAAQE,MAAK,SAACC,EAAUC,GAAX,OAAwBA,EAASV,MAAQS,EAAST,SACjFE,EAAsBK,GACtBH,EAAqBO,KACpB,IAGD,kBAAC,IAAM7D,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,KACG6B,EAAmB5B,KAAI,SAACC,GACvB,OACE,kBAACF,EAAA,EAAKG,KAAN,CACEC,cAAc,SACdrB,MAAO,CAAEsB,QAAS,OAClBC,IAAKJ,EAAQlC,IAEb,kBAACgC,EAAA,EAAKO,QAAN,CAAcT,QAAQ,QACpB,kBAACE,EAAA,EAAKQ,YAAN,KACGN,EAAQhC,WACP,kBAACuC,EAAA,EAAD,CAAMC,KAAK,OAAOb,MAAM,UAExB,kBAACY,EAAA,EAAD,CAAMC,KAAK,QAAQb,MAAM,QAE1BK,EAAQjC,cAGb,kBAAC+B,EAAA,EAAKO,QAAN,CAAcT,QAAQ,SACpB,kBAAC0C,EAAA,EAAD,KAAQtC,EAAQ0B,aAM1B,kBAAC7B,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG+B,EAAkB9B,KAAI,SAACC,GACtB,OACE,kBAACF,EAAA,EAAKG,KAAN,CACEC,cAAc,SACdrB,MAAO,CAAEsB,QAAS,OAClBC,IAAKJ,EAAQlC,IAEb,kBAACgC,EAAA,EAAKO,QAAN,CAAcT,QAAQ,QACpB,kBAACE,EAAA,EAAKQ,YAAN,KACGN,EAAQhC,WACP,kBAACuC,EAAA,EAAD,CAAMC,KAAK,OAAOb,MAAM,UAExB,kBAACY,EAAA,EAAD,CAAMC,KAAK,QAAQb,MAAM,QAE1BK,EAAQjC,cAGb,kBAAC+B,EAAA,EAAKO,QAAN,CAAcT,QAAQ,SACpB,kBAAC0C,EAAA,EAAD,KAAQtC,EAAQ0B,gBCnDnBa,EA7DD,WAAO,IAAD,EACwC1E,oBAAS,GADjD,mBACX2E,EADW,KACYC,EADZ,OAEkC5E,oBAAS,GAF3C,mBAEX6E,EAFW,KAESC,EAFT,OAGwC9E,oBAAS,GAHjD,mBAGX+E,EAHW,KAGYC,EAHZ,OAI8BhF,mBAAS,GAJvC,mBAIXiF,EAJW,KAIOC,EAJP,KAMZC,EAAkB,SAACC,GACvB,OAAQA,GACN,KAAK,EACHR,GAAyB,GACzBM,EAAoB,GACpBJ,GAAsB,GACtB,MACF,KAAK,EACHA,GAAsB,GACtBI,EAAoB,GACpBF,GAAyB,KAO/B,OACE,kBAACpE,EAAA,EAAD,CACEI,MAAO,CACLqE,MAAO,QACPC,OAAQ,YACRC,OAAQ,OACRjD,QAAS,SAGX,kBAACzB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaiC,UAAU,UACrB,kBAACyC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,CAAoBC,OAA6B,IAArBT,GAA5B,eAGA,kBAACO,EAAA,EAAWxD,QAAZ,CAAoBH,KAAK,gBACzB,kBAAC2D,EAAA,EAAWC,QAAZ,CAAoBC,OAA6B,IAArBT,GAA5B,mBAGA,kBAACO,EAAA,EAAWxD,QAAZ,CAAoBH,KAAK,gBACzB,kBAAC2D,EAAA,EAAWC,QAAZ,CAAoBC,OAA6B,IAArBT,GAA5B,gBAIF,kBAACjD,EAAA,EAAD,QAGH2C,GACC,kBAAC,EAAD,CAAazB,qBAAsBiC,IAEpCN,GACC,kBAAC,EAAD,CAAU3B,qBAAsBiC,IAEjCJ,GAAyB,kBAAC,EAAD,QClBjBY,EA1CD,WACZ,OACE,kBAAC/E,EAAA,EAAD,CAAWI,MAAO,CAAEqE,MAAO,QAASC,OAAQ,YAAaC,OAAQ,OAAQjD,QAAS,SAChF,gDACA,kBAACpB,EAAA,EAAD,CAAO0E,YAAa,sBACpB,kBAACpE,EAAA,EAAD,eACA,kBAACQ,EAAA,EAAD,MACA,2CACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAK4D,OAAN,CAAa7E,MAAO,CAAEsB,QAAS,QAA/B,cACA,kBAACL,EAAA,EAAKO,QAAN,KACE,kBAAChB,EAAA,EAAD,CAAQE,KAAK,QAAb,eAGA,kBAACF,EAAA,EAAD,CAAQE,KAAK,QAAb,eAGA,kBAACF,EAAA,EAAD,CAAQM,MAAM,MAAMJ,KAAK,QAAzB,YAKJ,kBAACO,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAK4D,OAAN,CAAa7E,MAAO,CAAEsB,QAAS,QAA/B,UACA,kBAACL,EAAA,EAAKO,QAAN,KACE,kBAAChB,EAAA,EAAD,CAAQE,KAAK,QAAb,eAGA,kBAACF,EAAA,EAAD,CAAQE,KAAK,QAAb,eAGA,kBAACF,EAAA,EAAD,CAAQM,MAAM,MAAMJ,KAAK,QAAzB,e,2BCcGoE,MAnDf,SAAmBjG,GACjB,IAAIkG,EAAUC,cAEd,OACE,kBAACC,EAAA,EAAD,CAAOvE,KAAK,OAAOwE,aAAW,EAACC,oBAAoB,GACjD,kBAACF,EAAA,EAAMJ,OAAP,KACE,kBAAChF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaiB,QAAQ,OAAOsD,MAAO,GAAnC,aAGA,kBAACxE,EAAA,EAAKC,OAAN,CAAaiB,QAAQ,QAAQsD,MAAO,EAAGtC,UAAU,SAC/C,kBAACvB,EAAA,EAAD,CAAQI,QAAS,kBAAMmE,EAAQK,KAAK,YAApC,uBAMN,kBAACH,EAAA,EAAMzD,QAAP,KACE,kBAAC6D,EAAA,EAAD,CACEC,OAAK,EACLC,QAAQ,0DACR7E,KAAK,OACL8E,QAAS3G,EAAMyG,QAEjB,kBAACL,EAAA,EAAMxD,YAAP,KACE,kBAACoD,EAAA,EAAD,iCACA,kBAAC,IAAD,KACE,kBAAC5D,EAAA,EAAD,CAAMwE,WAAS,EAACpE,cAAc,UAC5B,kBAACJ,EAAA,EAAKG,KAAN,CAAWR,QAAS,kBAAMmE,EAAQK,KAAK,YACrC,kBAACnE,EAAA,EAAKO,QAAN,KACE,kBAACP,EAAA,EAAK4D,OAAN,kBAGJ,kBAAC5D,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKO,QAAN,KACE,kBAACP,EAAA,EAAK4D,OAAN,oBAGJ,kBAAC5D,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKO,QAAN,KACE,kBAACP,EAAA,EAAK4D,OAAN,uBChBHa,MAtBf,WAAgB,IAAD,EAC6B1G,oBAAS,GADtC,mBACN2G,EADM,KAGb,OAHa,KAIX,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAWR,OAAO,KAEpB,kBAAC,IAAD,CAAOQ,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACRH,EAAgB,kBAAC,EAAD,MAAY,kBAAC,EAAD,CAAWL,OAAO,SCTxCS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACL0B,QAAQ1B,MAAMA,EAAM2B,c","file":"static/js/main.6c25383b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Input,\r\n  Button,\r\n  List,\r\n  Icon,\r\n} from \"semantic-ui-react\";\r\n\r\nconst OpinionStep = (props) => {\r\n  // States\r\n  const exampleUuids = [uuid(), uuid()];\r\n\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: exampleUuids[0],\r\n      description: \"Example Positive Feedback\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: exampleUuids[1],\r\n      description: \"Example Negative Feedback\",\r\n      isPositive: false,\r\n    },\r\n  ]);\r\n  const [currentIsPositive, setCurrentIsPositive] = useState(\"default\");\r\n  const [newOpinion, setNewOpinion] = useState(\"\");\r\n\r\n  // Functions\r\n  const onCurrentIconClick = () => {\r\n    switch (currentIsPositive) {\r\n      case \"default\":\r\n        setCurrentIsPositive(true);\r\n        break;\r\n      case true:\r\n        setCurrentIsPositive(false);\r\n        break;\r\n      case false:\r\n        setCurrentIsPositive(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const addOpinion = () => {\r\n    if (currentIsPositive !== \"default\" && newOpinion) {\r\n      setOpinions([\r\n        ...opinions,\r\n        { id: uuid(), description: newOpinion, isPositive: currentIsPositive },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const deleteOpinion = (id) => {\r\n    const newArray = opinions.filter((opinion) => {\r\n      return opinion.id !== id;\r\n    });\r\n    setOpinions([...newArray]);\r\n  };\r\n\r\n  const saveOpinions = () => {\r\n    // check if anything is filled in at all, if not show warning message but proceed.\r\n    // if pressed ok or there's at least 1 item then \r\n    // remove the 2 example up top\r\n    // .....\r\n    // call back-end to save data\r\n  }\r\n\r\n  const onOpinionInputChange = (event) => {\r\n    setNewOpinion(event.target.value);\r\n  };\r\n\r\n  const onNextStepClick = () => {\r\n    props.finishedAddingAction(1);\r\n    saveOpinions();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Grid>\r\n          <Grid.Column>\r\n            <Grid.Row style={{ paddingBottom: \"10px\" }}>\r\n              <Input\r\n                label=\"Write an opinion : \"\r\n                onChange={onOpinionInputChange}\r\n              ></Input>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ paddingBottom: \"10px\" }}>  \r\n            {'Choose intention: '}\r\n              {currentIsPositive === \"default\" ? (\r\n                <Button\r\n                  circular\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  onClick={onCurrentIconClick}\r\n                >\r\n                  Choose\r\n                </Button>\r\n              ) : currentIsPositive ? (\r\n                <Button\r\n                  circular\r\n                  icon=\"plus\"\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  color=\"green\"\r\n                  onClick={onCurrentIconClick}\r\n                ></Button>\r\n              ) : (\r\n                <Button\r\n                  circular\r\n                  icon=\"minus\"\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  color=\"red\"\r\n                  onClick={onCurrentIconClick}\r\n                ></Button>\r\n              )}\r\n              <Button\r\n                floated=\"right\"\r\n                size=\"tiny\"\r\n                color=\"olive\"\r\n                onClick={addOpinion}\r\n              >\r\n                Add opinion\r\n              </Button>\r\n            </Grid.Row>\r\n            <Grid.Row></Grid.Row>\r\n          </Grid.Column>\r\n        </Grid>\r\n        <Divider />\r\n        <List>\r\n          {opinions.map((opinion) => {\r\n            return (\r\n              <List.Item\r\n                verticalAlign=\"middle\"\r\n                style={{ padding: \"5px\" }}\r\n                key={opinion.id}\r\n              >\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Button\r\n                    size=\"mini\"\r\n                    icon=\"trash\"\r\n                    circular\r\n                    onClick={() => deleteOpinion(opinion.id)}\r\n                  ></Button>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n      <Container textAlign=\"right\" style={{ paddingTop: \"30px\" }}>\r\n        <Button icon labelPosition=\"right\" onClick={onNextStepClick}>\r\n          Next step: Vote\r\n          <Icon name=\"right arrow\" />\r\n        </Button>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default OpinionStep;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Input,\r\n  Button,\r\n  List,\r\n  Icon,\r\n} from \"semantic-ui-react\";\r\n\r\nexport const VoteStep = (props) => {\r\n  // Delete once database call is made\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback1\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback2\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback3\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback4\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback1\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback2\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback3\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback4\",\r\n      isPositive: false,\r\n    },\r\n  ]);\r\n\r\n  const [opinionsWithVotes, setOpinionsWithVotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // call endpoint for data. For now local state will be used.\r\n    // later on this will come dynamically, so need to snap the upVoted flag on top of each\r\n    // useEffect should probably also use something else instead of [] for that purpose\r\n    let newStates = {};\r\n    opinions.forEach((opinion) => {\r\n      newStates = {\r\n        ...newStates,\r\n        [opinion.id]: {\r\n          description: opinion.description,\r\n          isPositive: opinion.isPositive,\r\n          upVoted: false,\r\n        },\r\n      };\r\n      // this structure is better because arrays would change as new results gets added dynamically\r\n    });\r\n    setOpinionsWithVotes(newStates);\r\n  }, []);\r\n\r\n  const onNextStepClick = () => {\r\n    // warning if nothing is voted, but let them through\r\n    props.finishedAddingAction(2);\r\n  };\r\n\r\n  const voteUpOpinion = (id) => {\r\n    setOpinionsWithVotes({\r\n      ...opinionsWithVotes,\r\n      [id]: {\r\n        ...opinionsWithVotes[id],\r\n        upVoted: !opinionsWithVotes[id].upVoted,\r\n      },\r\n    })\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <List>\r\n          {Object.entries(opinionsWithVotes).map((opinion) => {\r\n            return (\r\n              <List.Item\r\n                verticalAlign=\"middle\"\r\n                style={{ padding: \"5px\" }}\r\n                key={opinion[0]}\r\n              >\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion[1].isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion[1].description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Button\r\n                    size=\"mini\"\r\n                    icon=\"up arrow\"\r\n                    color={\r\n                      opinionsWithVotes[opinion[0]].upVoted ? \"green\" : \"grey\"\r\n                    }\r\n                    circular\r\n                    onClick={() => voteUpOpinion(opinion[0])}\r\n                  ></Button>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n      <Container textAlign=\"right\" style={{ paddingTop: \"30px\" }}>\r\n        <Button icon labelPosition=\"right\" onClick={onNextStepClick}>\r\n          Next step: See Summary\r\n          <Icon name=\"right arrow\" />\r\n        </Button>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default VoteStep;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Input,\r\n  Button,\r\n  List,\r\n  Icon,\r\n  Label,\r\n} from \"semantic-ui-react\";\r\n\r\nconst SummaryStep = (props) => {\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback1\",\r\n      isPositive: true,\r\n      votes: 5,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback2\",\r\n      isPositive: true,\r\n      votes: 2,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback3\",\r\n      isPositive: true,\r\n      votes: 1,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback4\",\r\n      isPositive: true,\r\n      votes: 4,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback1\",\r\n      isPositive: false,\r\n      votes: 0,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback2\",\r\n      isPositive: false,\r\n      votes: 0,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback3\",\r\n      isPositive: false,\r\n      votes: 3,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback4\",\r\n      isPositive: false,\r\n      votes: 2,\r\n    },\r\n  ]);\r\n\r\n  const [sortedGoodOpinions, setSortedGoodOpinions] = useState([]);\r\n  const [sortedBadOpinions, setSortedBadOpinions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const onlyGood = opinions.filter(opinion => opinion.isPositive);\r\n    const onlyBad = opinions.filter(opinion => !opinion.isPositive)\r\n    const sortedGood = onlyGood.sort((opinionA, opinionB) => opinionB.votes - opinionA.votes);\r\n    const sortedBad = onlyBad.sort((opinionA, opinionB) => opinionB.votes - opinionA.votes);\r\n    setSortedGoodOpinions(sortedGood);\r\n    setSortedBadOpinions(sortedBad);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <List>\r\n          {sortedGoodOpinions.map((opinion) => {\r\n            return (\r\n              <List.Item\r\n                verticalAlign=\"middle\"\r\n                style={{ padding: \"5px\" }}\r\n                key={opinion.id}\r\n              >\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Label>{opinion.votes}</Label>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {sortedBadOpinions.map((opinion) => {\r\n            return (\r\n              <List.Item\r\n                verticalAlign=\"middle\"\r\n                style={{ padding: \"5px\" }}\r\n                key={opinion.id}\r\n              >\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Label>{opinion.votes}</Label>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SummaryStep;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Transition,\r\n  Button,\r\n  Icon,\r\n} from \"semantic-ui-react\";\r\nimport OpinionStep from \"./OpinionStep\";\r\nimport VoteStep from \"./VoteStep\";\r\nimport SummaryStep from \"./SummaryStep\";\r\n\r\nconst Retro = () => {\r\n  const [opinionStepVisibility, setOpinionStepVisibility] = useState(true);\r\n  const [voteStepVisibility, setVoteStepVisibility] = useState(false);\r\n  const [summaryStepVisibility, setSummaryStepVisibility] = useState(false);\r\n  const [activeBreadCrumb, setActiveBreadCrumb] = useState(1);\r\n\r\n  const onNextStepClick = (stepNumber) => {\r\n    switch (stepNumber) {\r\n      case 1:\r\n        setOpinionStepVisibility(false);\r\n        setActiveBreadCrumb(2);\r\n        setVoteStepVisibility(true);\r\n        break;\r\n      case 2:\r\n        setVoteStepVisibility(false);\r\n        setActiveBreadCrumb(3);\r\n        setSummaryStepVisibility(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        width: \"600px\",\r\n        border: \"1px solid\",\r\n        margin: \"15px\",\r\n        padding: \"15px\",\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Grid.Column textAlign=\"center\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Section active={activeBreadCrumb === 1}>\r\n              Add opinion\r\n            </Breadcrumb.Section>\r\n            <Breadcrumb.Divider icon=\"right arrow\" />\r\n            <Breadcrumb.Section active={activeBreadCrumb === 2}>\r\n              Vote for others\r\n            </Breadcrumb.Section>\r\n            <Breadcrumb.Divider icon=\"right arrow\" />\r\n            <Breadcrumb.Section active={activeBreadCrumb === 3}>\r\n              See summary\r\n            </Breadcrumb.Section>\r\n          </Breadcrumb>\r\n          <Divider />\r\n        </Grid.Column>\r\n      </Grid>\r\n      {opinionStepVisibility && (\r\n        <OpinionStep finishedAddingAction={onNextStepClick} />\r\n      )}\r\n      {voteStepVisibility && (\r\n        <VoteStep finishedAddingAction={onNextStepClick}></VoteStep>\r\n      )}\r\n      {summaryStepVisibility && <SummaryStep></SummaryStep>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Retro;\r\n","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Button,\r\n  Input,\r\n  Divider,\r\n  List,\r\n} from \"semantic-ui-react\";\r\n\r\nconst Admin = () => {\r\n  return (\r\n    <Container style={{ width: \"500px\", border: \"1px solid\", margin: \"15px\", padding: \"15px\" }}>\r\n      <h2>Create new retro</h2>\r\n      <Input placeholder={\"unique retro name\"}></Input>\r\n      <Button>Create</Button>\r\n      <Divider></Divider>\r\n      <h2>Open retros</h2>\r\n      <List>\r\n        <List.Item>\r\n          <List.Header style={{ padding: \"5px\" }}>Retro name</List.Header>\r\n          <List.Content>\r\n            <Button size=\"tiny\">\r\n              Go to Retro\r\n            </Button>\r\n            <Button size=\"tiny\">\r\n              See summary\r\n            </Button>\r\n            <Button color=\"red\" size=\"tiny\">\r\n              Delete\r\n            </Button>\r\n          </List.Content>\r\n        </List.Item>\r\n        <List.Item>\r\n          <List.Header style={{ padding: \"5px\" }}>Potato</List.Header>\r\n          <List.Content>\r\n            <Button size=\"tiny\">\r\n              Go to Retro\r\n            </Button>\r\n            <Button size=\"tiny\">\r\n              See summary\r\n            </Button>\r\n            <Button color=\"red\" size=\"tiny\">\r\n              Delete\r\n            </Button>\r\n          </List.Content>\r\n        </List.Item>\r\n      </List>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button, Grid, Header, List, Message } from \"semantic-ui-react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction LoginPage(props) {\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <Modal size=\"tiny\" defaultOpen closeOnDimmerClick={false}>\r\n      <Modal.Header>\r\n        <Grid>\r\n          <Grid.Column floated=\"left\" width={8}>\r\n            Retro app\r\n          </Grid.Column>\r\n          <Grid.Column floated=\"right\" width={8} textAlign=\"right\">\r\n            <Button onClick={() => history.push(\"/admin\")}>\r\n              Retro lead login\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Modal.Header>\r\n      <Modal.Content>\r\n        <Message\r\n          error\r\n          content=\"Only logged in users can access the retro creation page\"\r\n          size=\"tiny\"\r\n          hidden={!props.error}\r\n        />\r\n        <Modal.Description>\r\n          <Header>All open retros to join:</Header>\r\n          <Router>\r\n            <List selection verticalAlign=\"middle\">\r\n              <List.Item onClick={() => history.push(\"/retro\")}>\r\n                <List.Content>\r\n                  <List.Header> Helen </List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n              <List.Item>\r\n                <List.Content>\r\n                  <List.Header>Christian</List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n              <List.Item>\r\n                <List.Content>\r\n                  <List.Header>Daniel</List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n            </List>\r\n          </Router>\r\n        </Modal.Description>\r\n      </Modal.Content>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, {useState} from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Retro from \"./Retro\";\nimport Admin from './Admin';\nimport LoginPage from \"./LoginPage\";\n\nfunction App() {\n  const [authenticated, setAuthenticated] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <LoginPage error={false}/>\n          </Route>\n          <Route path=\"/retro\">\n            <Retro />\n          </Route>\n          <Route path=\"/admin\">\n            {(authenticated ? <Admin /> : <LoginPage error={true}/>)}\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}