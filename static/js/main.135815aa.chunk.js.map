{"version":3,"sources":["api.js","OpinionStep.js","VoteStep.js","SummaryStep.js","Retro.js","Admin.js","LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","process","api","getRetros","url","axios","get","result","data","getRetro","id","submitRetroOpinions","opinions","post","response","status","submitVotesOnOpinion","votedOpinions","addRetro","deleteRetro","delete","OpinionStep","props","exampleUuids","uuid","location","useLocation","retroId","queryString","parse","search","useState","description","isPositive","setOpinions","currentIsPositive","setCurrentIsPositive","newOpinion","setNewOpinion","setCurrentRetro","showError","setShowError","useEffect","a","fetchData","onCurrentIconClick","saveOpinions","onNextStepClick","finishedAddingAction","Container","Message","error","content","size","hidden","Grid","Column","Row","style","paddingBottom","Input","label","onChange","event","target","value","Button","circular","marginLeft","onClick","icon","color","floated","Divider","List","map","opinion","Item","padding","key","Content","Description","Icon","name","newArray","filter","deleteOpinion","textAlign","paddingTop","labelPosition","VoteStep","opinionsWithVotes","setOpinionsWithVotes","currentRetro","sort","x","y","newStates","forEach","upVoted","votedOpinionIds","Object","entries","item","SummaryStep","votes","sortedGoodOpinions","setSortedGoodOpinions","sortedBadOpinions","setSortedBadOpinions","onlyGood","onlyBad","sortedGood","opinionA","opinionB","sortedBad","Label","Retro","opinionStepVisibility","setOpinionStepVisibility","voteStepVisibility","setVoteStepVisibility","summaryStepVisibility","setSummaryStepVisibility","activeBreadCrumb","setActiveBreadCrumb","stepNumber","width","border","margin","Breadcrumb","Section","active","Admin","retros","setRetros","newRetroName","setNewRetroName","placeholder","retro","LoginPage","history","useHistory","push","selection","Header","App","authenticated","className","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.135815aa.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst BASE_URL = process.env.REACT_APP_API_URI;\r\n\r\nconst api = {\r\n  async getRetros() {\r\n    let url = `${BASE_URL}/api/retros`;\r\n\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  },\r\n\r\n  async getRetro(id) {\r\n    let url = `${BASE_URL}/api/retro/${id}`;\r\n\r\n    const result = await axios.get(url);\r\n    return result.data;\r\n  },\r\n\r\n  async submitRetroOpinions(id, opinions) {\r\n    let url = `${BASE_URL}/api/retro/opinions/${id}`;\r\n\r\n    const response = await axios.post(url, { opinions });\r\n    return response.status === 200;\r\n  },\r\n\r\n  async submitVotesOnOpinion(id, votedOpinions) {\r\n    let url = `${BASE_URL}/api/retro/opinions/votes/${id}`;\r\n\r\n    const response = await axios.post(url, { votedOpinions });\r\n    return response.status === 200;\r\n  },\r\n\r\n  async addRetro(id) {\r\n    let url = `${BASE_URL}/api/retro/${id}`;\r\n\r\n    const response = await axios.post(url);\r\n    return response.status === 200;\r\n  },\r\n\r\n  async deleteRetro(id) {\r\n    let url = `${BASE_URL}/api/retro/${id}`;\r\n\r\n    const response = await axios.delete(url);\r\n    return response.status === 200;\r\n  },\r\n};\r\n\r\nexport default api;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Input,\r\n  Button,\r\n  List,\r\n  Icon,\r\n  Message,\r\n} from \"semantic-ui-react\";\r\nimport api from \"./api\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\n\r\nconst OpinionStep = (props) => {\r\n  // States\r\n  const exampleUuids = [uuid(), uuid()];\r\n  let location = useLocation();\r\n  const retroId = queryString.parse(location.search);\r\n\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: exampleUuids[0],\r\n      description: \"Example Positive Feedback\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: exampleUuids[1],\r\n      description: \"Example Negative Feedback\",\r\n      isPositive: false,\r\n    },\r\n  ]);\r\n  const [currentIsPositive, setCurrentIsPositive] = useState(\"default\");\r\n  const [newOpinion, setNewOpinion] = useState(\"\");\r\n  const [currentRetro, setCurrentRetro] = useState(\"\");\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await api.getRetro(retroId.id);\r\n      setCurrentRetro(response);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Functions\r\n  const onCurrentIconClick = () => {\r\n    switch (currentIsPositive) {\r\n      case \"default\":\r\n        setCurrentIsPositive(true);\r\n        break;\r\n      case true:\r\n        setCurrentIsPositive(false);\r\n        break;\r\n      case false:\r\n        setCurrentIsPositive(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const addOpinion = () => {\r\n    if (currentIsPositive !== \"default\" && newOpinion) {\r\n      setOpinions([\r\n        ...opinions,\r\n        { id: uuid(), description: newOpinion, isPositive: currentIsPositive },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const deleteOpinion = (id) => {\r\n    const newArray = opinions.filter((opinion) => {\r\n      return opinion.id !== id;\r\n    });\r\n    setOpinions([...newArray]);\r\n  };\r\n\r\n  const saveOpinions = async () => {\r\n    return await api.submitRetroOpinions(retroId.id, opinions);\r\n    // check if anything is filled in at all, if not show warning message but proceed.\r\n    // if pressed ok or there's at least 1 item then\r\n    // remove the 2 example up top\r\n    // .....\r\n    // call back-end to save data\r\n  };\r\n\r\n  const onOpinionInputChange = (event) => {\r\n    setNewOpinion(event.target.value);\r\n  };\r\n\r\n  const onNextStepClick = async () => {\r\n    const isSuccess = await saveOpinions();\r\n    if (isSuccess) {\r\n      props.finishedAddingAction(1);\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Message\r\n          error\r\n          content=\"Something went wrong server side. Please try again.\"\r\n          size=\"tiny\"\r\n          hidden={!showError}\r\n        />\r\n        <Grid>\r\n          <Grid.Column>\r\n            <Grid.Row style={{ paddingBottom: \"10px\" }}>\r\n              <Input\r\n                label=\"Write an opinion : \"\r\n                onChange={onOpinionInputChange}\r\n              ></Input>\r\n            </Grid.Row>\r\n            <Grid.Row style={{ paddingBottom: \"10px\" }}>\r\n              {\"Choose intention: \"}\r\n              {currentIsPositive === \"default\" ? (\r\n                <Button\r\n                  circular\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  onClick={onCurrentIconClick}\r\n                >\r\n                  Choose\r\n                </Button>\r\n              ) : currentIsPositive ? (\r\n                <Button\r\n                  circular\r\n                  icon=\"plus\"\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  color=\"green\"\r\n                  onClick={onCurrentIconClick}\r\n                ></Button>\r\n              ) : (\r\n                <Button\r\n                  circular\r\n                  icon=\"minus\"\r\n                  size=\"tiny\"\r\n                  style={{ marginLeft: \"10px\" }}\r\n                  color=\"red\"\r\n                  onClick={onCurrentIconClick}\r\n                ></Button>\r\n              )}\r\n              <Button\r\n                floated=\"right\"\r\n                size=\"tiny\"\r\n                color=\"olive\"\r\n                onClick={addOpinion}\r\n              >\r\n                Add opinion\r\n              </Button>\r\n            </Grid.Row>\r\n            <Grid.Row></Grid.Row>\r\n          </Grid.Column>\r\n        </Grid>\r\n        <Divider />\r\n        <List>\r\n          {opinions.map((opinion) => {\r\n            return (\r\n              <List.Item style={{ padding: \"5px\" }} key={opinion.id}>\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Button\r\n                    size=\"mini\"\r\n                    icon=\"trash\"\r\n                    circular\r\n                    onClick={() => deleteOpinion(opinion.id)}\r\n                  ></Button>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n      <Container textAlign=\"right\" style={{ paddingTop: \"30px\" }}>\r\n        <Button icon labelPosition=\"right\" onClick={onNextStepClick}>\r\n          Next step: Vote\r\n          <Icon name=\"right arrow\" />\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OpinionStep;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Container, Button, List, Icon, Message } from \"semantic-ui-react\";\r\nimport queryString from \"query-string\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport api from \"./api\";\r\n\r\nexport const VoteStep = (props) => {\r\n  // Delete once database call is made\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback1\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback2\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback3\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback4\",\r\n      isPositive: true,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback1\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback2\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback3\",\r\n      isPositive: false,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback4\",\r\n      isPositive: false,\r\n    },\r\n  ]);\r\n\r\n  const [opinionsWithVotes, setOpinionsWithVotes] = useState([]);\r\n  const retroId = queryString.parse(useLocation().search);\r\n  const [showError, setShowError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const currentRetro = await api.getRetro(retroId.id);\r\n      currentRetro.opinions = currentRetro.opinions.sort((x, y) => (x.isPositive === y.isPositive ? 0 : x.isPositive ? -1 : 1));\r\n\r\n      let newStates = {};\r\n      currentRetro.opinions.forEach((opinion) => {\r\n        newStates = {\r\n          ...newStates,\r\n          [opinion.id]: {\r\n            description: opinion.description,\r\n            isPositive: opinion.isPositive,\r\n            upVoted: false,\r\n          },\r\n        };\r\n        // this structure is better because arrays would change as new results gets added dynamically\r\n      });\r\n      setOpinionsWithVotes(newStates);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const onNextStepClick = async () => {\r\n    // TODO: warning if nothing is voted, but let them through\r\n    const votedOpinionIds = Object.entries(opinionsWithVotes)\r\n      .map((opinion) => {\r\n        return opinion[1].upVoted ? opinion[0] : null;\r\n      })\r\n      .filter((item) => item !== null);\r\n\r\n    const isSuccess = await api.submitVotesOnOpinion(retroId.id, votedOpinionIds);\r\n    if (isSuccess) {\r\n      props.finishedAddingAction(1);\r\n    } else {\r\n      setShowError(true);\r\n    }\r\n    props.finishedAddingAction(2);\r\n  };\r\n\r\n  const voteUpOpinion = (id) => {\r\n    setOpinionsWithVotes({\r\n      ...opinionsWithVotes,\r\n      [id]: {\r\n        ...opinionsWithVotes[id],\r\n        upVoted: !opinionsWithVotes[id].upVoted,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Message error content=\"Something went wrong server side. Please try again.\" size=\"tiny\" hidden={!showError} />\r\n        <List>\r\n          {Object.entries(opinionsWithVotes).map((opinion) => {\r\n            return (\r\n              <List.Item style={{ padding: \"5px\" }} key={opinion[0]}>\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion[1].isPositive ? <Icon name=\"plus\" color=\"green\" /> : <Icon name=\"minus\" color=\"red\" />}\r\n                    {opinion[1].description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Button\r\n                    size=\"mini\"\r\n                    icon=\"up arrow\"\r\n                    color={opinionsWithVotes[opinion[0]].upVoted ? \"green\" : \"grey\"}\r\n                    circular\r\n                    onClick={() => voteUpOpinion(opinion[0])}\r\n                  ></Button>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n      <Container textAlign=\"right\" style={{ paddingTop: \"30px\" }}>\r\n        <Button icon labelPosition=\"right\" onClick={onNextStepClick}>\r\n          Next step: See Summary\r\n          <Icon name=\"right arrow\" />\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoteStep;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport {\r\n  Container,\r\n  Divider,\r\n  List,\r\n  Icon,\r\n  Label,\r\n} from \"semantic-ui-react\";\r\nimport queryString from \"query-string\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport api from \"./api\";\r\n\r\nconst SummaryStep = (props) => {\r\n  const [opinions, setOpinions] = useState([\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback1\",\r\n      isPositive: true,\r\n      votes: 5,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback2\",\r\n      isPositive: true,\r\n      votes: 2,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback3\",\r\n      isPositive: true,\r\n      votes: 1,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Positive Feedback4\",\r\n      isPositive: true,\r\n      votes: 4,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback1\",\r\n      isPositive: false,\r\n      votes: 0,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback2\",\r\n      isPositive: false,\r\n      votes: 0,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback3\",\r\n      isPositive: false,\r\n      votes: 3,\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Example Negative Feedback4\",\r\n      isPositive: false,\r\n      votes: 2,\r\n    },\r\n  ]);\r\n\r\n  const [sortedGoodOpinions, setSortedGoodOpinions] = useState([]);\r\n  const [sortedBadOpinions, setSortedBadOpinions] = useState([]);\r\n  const retroId = queryString.parse(useLocation().search);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const { opinions } = await api.getRetro(retroId.id);\r\n      const onlyGood = opinions.filter((opinion) => opinion.isPositive);\r\n      const onlyBad = opinions.filter((opinion) => !opinion.isPositive);\r\n      const sortedGood = onlyGood.sort(\r\n        (opinionA, opinionB) => opinionB.votes - opinionA.votes\r\n      );\r\n      const sortedBad = onlyBad.sort(\r\n        (opinionA, opinionB) => opinionB.votes - opinionA.votes\r\n      );\r\n      setSortedGoodOpinions(sortedGood);\r\n      setSortedBadOpinions(sortedBad);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <List>\r\n          {sortedGoodOpinions.map((opinion) => {\r\n            return (\r\n              <List.Item style={{ padding: \"5px\" }} key={opinion.id}>\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Label>{opinion.votes}</Label>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {sortedBadOpinions.map((opinion) => {\r\n            return (\r\n              <List.Item style={{ padding: \"5px\" }} key={opinion.id}>\r\n                <List.Content floated=\"left\">\r\n                  <List.Description>\r\n                    {opinion.isPositive ? (\r\n                      <Icon name=\"plus\" color=\"green\" />\r\n                    ) : (\r\n                      <Icon name=\"minus\" color=\"red\" />\r\n                    )}\r\n                    {opinion.description}\r\n                  </List.Description>\r\n                </List.Content>\r\n                <List.Content floated=\"right\">\r\n                  <Label>{opinion.votes}</Label>\r\n                </List.Content>\r\n              </List.Item>\r\n            );\r\n          })}\r\n        </List>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SummaryStep;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n} from \"semantic-ui-react\";\r\nimport OpinionStep from \"./OpinionStep\";\r\nimport VoteStep from \"./VoteStep\";\r\nimport SummaryStep from \"./SummaryStep\";\r\n\r\nconst Retro = () => {\r\n  const [opinionStepVisibility, setOpinionStepVisibility] = useState(true);\r\n  const [voteStepVisibility, setVoteStepVisibility] = useState(false);\r\n  const [summaryStepVisibility, setSummaryStepVisibility] = useState(false);\r\n  const [activeBreadCrumb, setActiveBreadCrumb] = useState(1);\r\n\r\n  const onNextStepClick = (stepNumber) => {\r\n    switch (stepNumber) {\r\n      case 1:\r\n        setOpinionStepVisibility(false);\r\n        setActiveBreadCrumb(2);\r\n        setVoteStepVisibility(true);\r\n        break;\r\n      case 2:\r\n        setVoteStepVisibility(false);\r\n        setActiveBreadCrumb(3);\r\n        setSummaryStepVisibility(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        width: \"600px\",\r\n        border: \"1px solid\",\r\n        margin: \"15px\",\r\n        padding: \"15px\",\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Grid.Column textAlign=\"center\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Section active={activeBreadCrumb === 1}>\r\n              Add opinion\r\n            </Breadcrumb.Section>\r\n            <Breadcrumb.Divider icon=\"right arrow\" />\r\n            <Breadcrumb.Section active={activeBreadCrumb === 2}>\r\n              Vote for others\r\n            </Breadcrumb.Section>\r\n            <Breadcrumb.Divider icon=\"right arrow\" />\r\n            <Breadcrumb.Section active={activeBreadCrumb === 3}>\r\n              See summary\r\n            </Breadcrumb.Section>\r\n          </Breadcrumb>\r\n          <Divider />\r\n        </Grid.Column>\r\n      </Grid>\r\n      {opinionStepVisibility && (\r\n        <OpinionStep finishedAddingAction={onNextStepClick} />\r\n      )}\r\n      {voteStepVisibility && (\r\n        <VoteStep finishedAddingAction={onNextStepClick}></VoteStep>\r\n      )}\r\n      {summaryStepVisibility && <SummaryStep></SummaryStep>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Retro;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Button, Input, Divider, List } from \"semantic-ui-react\";\r\nimport api from \"./api\";\r\n\r\nconst Admin = () => {\r\n  const [retros, setRetros] = useState([]);\r\n  const [newRetroName, setNewRetroName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await api.getRetros();\r\n      setRetros(response);\r\n    }\r\n    fetchData();\r\n  }, [retros]);\r\n\r\n  const addRetro = () => {\r\n    if (newRetroName) {\r\n      api.addRetro(newRetroName);\r\n    }\r\n  };\r\n\r\n  const deleteRetro = (retroId) => {\r\n    api.deleteRetro(retroId);\r\n  };\r\n\r\n  const onRetroNameChange = (event) => {\r\n    setNewRetroName(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container style={{ width: \"500px\", border: \"1px solid\", margin: \"15px\", padding: \"15px\" }}>\r\n      <h2>Create new retro</h2>\r\n      <Input placeholder={\"unique retro name\"} onChange={onRetroNameChange}></Input>\r\n      <Button onClick={addRetro}>Create</Button>\r\n      <Divider></Divider>\r\n      <h2>Retro management</h2>\r\n      <List>\r\n        {retros.map((retro) => (\r\n          <List.Item>\r\n            <List.Content floated=\"left\">\r\n              <h4 style={{ padding: \"5px\" }}>{retro.id}</h4>\r\n            </List.Content>\r\n            <List.Content floated=\"right\">\r\n              <Button color=\"red\" size=\"tiny\" onClick={() => deleteRetro(retro.id)}>\r\n                Delete\r\n              </Button>\r\n            </List.Content>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Grid,\r\n  List,\r\n  Message,\r\n  Divider,\r\n} from \"semantic-ui-react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport api from \"./api\";\r\n\r\nfunction LoginPage(props) {\r\n  let history = useHistory();\r\n  const [retros, setRetros] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await api.getRetros();\r\n      setRetros(response);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Container\r\n      style={{\r\n        width: \"500px\",\r\n        border: \"1px solid\",\r\n        margin: \"15px\",\r\n        padding: \"15px\",\r\n      }}\r\n    >\r\n      <Grid>\r\n        <Grid.Column floated=\"left\" width={8}>\r\n          <h1> Retro app</h1>\r\n          <Divider />\r\n        </Grid.Column>\r\n        <Grid.Column floated=\"right\" width={8} textAlign=\"right\">\r\n          <Button onClick={() => history.push(\"/admin\")}>\r\n            Retro lead login\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid>\r\n      <Grid>\r\n        <Message\r\n          error\r\n          content=\"Only logged in users can access the retro creation page\"\r\n          size=\"tiny\"\r\n          hidden={!props.error}\r\n        />\r\n        <Grid.Row style={{ margin: \"5px\" }}>\r\n          <h3>All open retros to join:</h3>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Router>\r\n            <List selection>\r\n              {retros.map((retro) => {\r\n                return (\r\n                  <List.Item\r\n                    onClick={() => history.push(`/retro?id=${retro.id}`)}\r\n                  >\r\n                    <List.Content>\r\n                      <List.Header>{retro.id}</List.Header>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                );\r\n              })}\r\n            </List>\r\n          </Router>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, {useState} from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Retro from \"./Retro\";\nimport Admin from './Admin';\nimport LoginPage from \"./LoginPage\";\n\nfunction App() {\n  const [authenticated, setAuthenticated] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <LoginPage error={false}/>\n          </Route>\n          <Route path=\"/retro\">\n            <Retro />\n          </Route>\n          <Route path=\"/admin\">\n            {(authenticated ? <Admin /> : <LoginPage error={true}/>)}\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}